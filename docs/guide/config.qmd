---
title: "Configuring the checks"
jupyter: python3
order: 3
---

You can pass a `Config` object to `check()` to customise the checks done
on your Data Package's properties. The following configuration options
are available:

-   `version`: The version of Data Package standard to check against.
    Defaults to `v2`.
-   `exclusions`: A list of checks to exclude.
-   `extensions`: The list of extensions, which are additional checks
    that supplement those specified by the Data Package standard.
-   `strict`: Whether to run recommended checks in addition to required
    ones. Defaults to `False`.

## Excluding checks

You can exclude checks based on their `type` and the fields they apply
to.

The Data Package standard defines a range of check types (e.g.,
`required` or `pattern`) and it is also possible to create your own. For
example, to exclude checks flagging missing fields, you would exclude
the `required` check by defining an `Exclusion` object with this `type`:

```{python}
from textwrap import dedent
import check_datapackage as cdp

exclusion_required = cdp.Exclusion(type="required")
```

To exclude checks of a specific field or fields, you can use a [JSON
path](https://en.wikipedia.org/wiki/JSONPath) in the `jsonpath`
attribute of an `Exclusion` object. For example, you can exclude all
checks on the `name` field of the Data Package properties by writing:

```{python}
exclusion_name = cdp.Exclusion(jsonpath="$.name")
```

Or you can use the wildcard JSON path selector to exclude checks on the
`path` field of **all** Data Resource properties:

```{python}
exclusion_path = cdp.Exclusion(jsonpath="$.resources[*].path")
```

The `type` and `jsonpath` arguments can also be combined:

```{python}
exclusion_desc_required = cdp.Exclusion(type="required", jsonpath="$.resources[*].description")
```

This will exclude required checks on the `description` field of Data
Resource properties.

To apply your exclusions when running the `check()`, you add them to the
`Config` object passed to the `check()` function:

```{python}
package_properties = {
    "name": 123,
    "title": "Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    "id": "123-abc-123",
    "created": "2014-05-14T05:00:01+00:00",
    "version": "1.0.0",
    "licenses": [{"name": "odc-pddl"}],
    "resources": [
        {
            "name": "woolly-dormice-2015",
            "title": "Body fat percentage in the hibernating woolly dormouse",
            "path": "https://en.wikipedia.org/wiki/Woolly_dormouse",
        }
    ],
}

config = cdp.Config(exclusions=[exclusion_required, exclusion_name, exclusion_path])
cdp.check(properties=package_properties, config=config)
```

In the example above, we would expect four `Issue` items: the package
`name` is a number, the required `description` field is missing in both
the package and resource properties, and the resource `path` doesn't
point to a data file. However, as we have defined exclusions for all of
these, the function will flag no issues.

## Adding extensions

It is possible to add extensions in addition to the ones defined in the
Data Package standard. There are currently two types of extensions
supported: `CustomCheck` and `RequiredCheck`. You can use as many
`CustomCheck`s and `RequiredCheck`s as you want to fit your needs.

### Custom checks

Let's say your organisation only accepts Data Packages licensed under
MIT. You can express this `CustomCheck` as follows:

```{python}
license_check = cdp.CustomCheck(
    type="only-mit",
    jsonpath="$.licenses[*].name",
    message=dedent("""
        Data Packages may only be licensed under MIT. Please review
        the licenses listed in the Data Package.
        """),
    check=lambda license_name: license_name == "mit",
)
```

For more details on what each parameter means, see the
[`CustomCheck`](/docs/reference/custom_check.qmd) documentation.
Specific to this example, the `type` is setting the identifier of the
check to `only-mit` and the `jsonpath` is indicating to only check the
`name` property of each license in the `licenses` property of the Data
Package.

To register your custom checks with the `check()` function, you add them
to the `Config` object passed to the function:

```{python}
#| eval: false
package_properties = {
    "name": "woolly-dormice",
    "title": "Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    "description": dedent("""
        This scoping review explores the hibernation physiology of the
        woolly dormouse, drawing on data collected over a 10-year period
        along the Taurus Mountain range in Turkey.
        """),
    "id": "123-abc-123",
    "created": "2014-05-14T05:00:01+00:00",
    "version": "1.0.0",
    "licenses": [{"name": "odc-pddl"}, {"name": "mit"}],
    "resources": [
        {
            "name": "woolly-dormice-2015",
            "title": "Body fat percentage in the hibernating woolly dormouse",
            "path": "resources/woolly-dormice-2015/data.parquet",
        }
    ],
}

config = cdp.Config(extensions=cdp.Extensions(custom_checks=[license_check]))
cdp.check(properties=package_properties, config=config)
```

We can see that the custom check was applied: `check()` returned one
issue flagging the first license attached to the Data Package.

### Required checks

You can also set specific properties in the `datapackage.json` file as
required, even though it isn't required by the Data Package standard.
For example, if you want to make the `description` field of Data Package
a required field, you can define a `RequiredCheck` like this:

```{python}
#| eval: false
description_required = cdp.RequiredCheck(
    jsonpath="$.description",
    message="The 'description' field is required in the Data Package properties.",
)
```

See the [`RequiredCheck`](/docs/reference/required_check.qmd)
documentation for more details on its parameters.

To use this `RequiredCheck` in the `Config` object passed to `check()`,
it would look like:

```{python}
#| eval: false
config = cdp.Config(extensions=cdp.Extensions(required_checks=[description_required]))
cdp.check(properties=package_properties, config=config)
```

## Strict mode

The Data Package standard has both requirements and recommendations. By
default, `check()` only checks requirements. Recommendations can be
turned on by setting the `strict` argument to `True`. The example below
violates the recommendation that the package `name` should contain no
special characters.

```{python}
#| eval: false
package_properties = {
    "name": "Woolly Dormice (Toros Dağları)",
    "title": "Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    "description": dedent("""
        This scoping review explores the hibernation physiology of the
        woolly dormouse, drawing on data collected over a 10-year period
        along the Taurus Mountain range in Turkey.
        """),
    "id": "123-abc-123",
    "created": "2014-05-14T05:00:01+00:00",
    "version": "1.0.0",
    "licenses": [{"name": "odc-pddl"}],
    "resources": [
        {
            "name": "woolly-dormice-2015",
            "title": "Body fat percentage in the hibernating woolly dormouse",
            "path": "resources/woolly-dormice-2015/data.parquet",
        }
    ],
}

cdp.check(properties=package_properties, strict=True)
```
