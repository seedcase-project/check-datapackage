---
title: "Checking a Data Package descriptor"
jupyter: python3
order: 1
# TODO: eval when implemented
eval: false
---

The structure and content of the Data Package descriptor follow the
[Data Package standard](https://datapackage.org). This standard defines
the available properties at each level of the descriptor, specifies
which properties are required, and describes the allowed values for
each.

`check-datapackage` provides the `check()` function to verify that a
Data Package descriptor meets these requirements. `check()` takes a
Python `dict` as input, representing the descriptor, and by default
returns a list of `Issue` objects, each corresponding to a failed check
on a field in the descriptor. If you prefer the output as an error, you
can also run `check()` with `error=True`. When checking a descriptor,
you can customise the function's behaviour by specifying issues to
ignore and additional custom checks to perform.

By default, `check()` returns a list of `Issue` objects, each
corresponding to one failed check on one field in the descriptor. If
there are no failed checks, an empty list is returned.

In the example below, all required fields in the descriptor are present
and well-formed, so the output of `check()`, `issues`, is an empty list.

```{python}
from textwrap import dedent
import check_datapackage as cdp

package_descriptor = {
    "name": "woolly-dormice",
    "title": "Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    "description": dedent("""
        This scoping review explores the hibernation physiology of the
        woolly dormouse, drawing on data collected over a 10-year period
        along the Taurus Mountain range in Turkey.
        """),
    "id": "123-abc-123",
    "created": "2014-05-14T05:00:01+00:00",
    "version": "1.0.0",
    "licenses": [{"name": "odc-pddl"}],
    "resources": [
        {
            "name": "woolly-dormice-2015",
            "title": "Body fat percentage in the hibernating woolly dormouse",
            "path": "resources/woolly-dormice-2015/data.parquet",
        }
    ],
}

issues = cdp.check(descriptor=package_descriptor)
print(issues)
```

Now let's remove the required `description` field from the descriptor
and give a `name` of the wrong type (a number instead of a string).

```{python}
package_descriptor = {
    "name": 123,
    "title": "Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    "id": "123-abc-123",
    "created": "2014-05-14T05:00:01+00:00",
    "version": "1.0.0",
    "licenses": [{"name": "odc-pddl"}],
    "resources": [
        {
            "name": "woolly-dormice-2015",
            "title": "Body fat percentage in the hibernating woolly dormouse",
            "path": "resources/woolly-dormice-2015/data.parquet",
        }
    ],
}

issues = cdp.check(descriptor=package_descriptor)
print(issues)
```

The output now lists two issues: one for the missing `description` field
and one for the `name` field of the wrong type.

## Checks as errors

If you want failed checks to result in errors and terminate program
execution, you can achieve this by setting the `error` argument of
`check()` to `True`.

```{python}
#| error: true
package_descriptor = {
    "name": 123,
    "title": "Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    "id": "123-abc-123",
    "created": "2014-05-14T05:00:01+00:00",
    "version": "1.0.0",
    "licenses": [{"name": "odc-pddl"}],
}

cdp.check(descriptor=package_descriptor, error=True)
```

Now, if any issues are found, the function will produce an error instead
of outputting the list of issues. When setting `error=True`, internally
`check()` uses `explain()` to generate the error messages.

::: callout-note
You can configure the checks by using the `Config` class. See the
[Configuration](config.qmd) guide for more details.
:::
