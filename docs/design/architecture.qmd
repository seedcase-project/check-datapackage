---
title: "Architecture"
---

This documentation contains the architectural design for
`check-datapackage`. For design details of the Seedcase Project as a
whole, see the [Seedcase Design](https://design.seedcase-project.org)
documentation.

This document outlines the architecture of `check-datapackage` mostly to
ensure the team shares a common understanding before implementation, but
also to communicate the design to anyone else interested in the internal
workings of the package.

## User types {#user-types}

This section describes the different users we expect and design for:

-   **Owner:** Creates and owns the Data Package. Wants to ensure that
    the Data Package is compliant with the Data Package standard on a
    general level.
-   **Manager:** Manages and edits the properties within the Data
    Package. Wants to make sure that whenever changes are made to the
    properties (e.g., the `description` field is updated), the Data
    Package remains compliant with the standard.
-   **Developer:** Contributes to building up the Data Package including
    the data itself and/or the infrastructure around it. Wants to ensure
    that changes don't impact the compliance of the Data Package. Might
    add custom checks or ignore certain checks to fit the specific needs
    of the project.

## C4 Models

This section contains the [C4 Models](https://c4model.com/) for
`check-datapackage`. The C4 Model is an established visualisation
approach to describe the architecture of a software system. It breaks
the system down into four levels of architectural abstraction: System
context, containers, components, and code.

### System context

The system context diagram shows the users and any external systems that
interact with `check-datapackage`. This includes the user types and the
Data Package standard.

`check-datapackage` receives the definitions of the Data Package
descriptor's structure---including required properties, their formats,
and recommended fields---from the Data Package standard (version 2). The
standard provides this information through versioned JSON Schema
profiles that define required properties and textual descriptions that
outline recommendations.

The users, described in the [User types](#user-types) section, provide
`check-datapackage` with their Data Package's descriptor to check its
compliance with the standard.

```{mermaid}
%%| label: fig-c4-context
%%| fig-cap: "C4 system context diagram showing the anticipated users and the external system (the Data Package standard) `check-datapackage` interacts with."
flowchart LR

    subgraph "Users"
        user_owner("Owner<br>[person]")
        user_manager("Manager<br>[person]")
        user_developer("Developer<br>[person]")
    end

    dp_standard("Data Package V2<br>[standard]")
    check("check-datapackage<br>[Python package]")


    dp_standard --"Definition of the standard<br>and its recommendations"--> check
    Users --"Checks the compliance of<br>their Data Package's<br>descriptor"--> check

    %% Styling
    style Users fill:#FFFFFF, color:#000000
```


### Container

The Container diagram shows the larger parts of the system, what they
are responsible for, and how they interact with each other. It also
shows the technology choices for each container.

```{mermaid}
%%| label: fig-c4-container
%%| fig-cap: "C4 Container diagram showing larger parts of `check-datapackage` and their connections."
flowchart LR
    ext_dp_schema(["Data Package standard<br>[JSON]<br><br>Define descriptor<br>structure and contents."])
    in_dp_json(["Descriptor<br>[Python]<br><br>Describe Data Package<br>or Data Resource."])
    config(["Config<br>[Python]<br><br>Configure check<br>behaviour and output."])
    check

    config --> check
    ext_dp_schema --> check
    in_dp_json --> check
```

## Naming

This section contains a naming scheme for `check-datapackage` that is
inspired by the [Data Package standard](https://datapackage.org/).

Following Data Package terminology, we simplify "data package" to
"package" and "data resource" to "resource". The Data Package standard
calls a standalone and complete metadata structure
["descriptor"](https://datapackage.org/standard/glossary/#descriptor).
Descriptors are JSON objects contained in JSON files (e.g.,
`datapackage.json` contains the Data Package descriptor). We adopt this
usage, but may also use the word "properties" to refer to the metadata
as a whole.

### Objects

| Object | Description |
|----------------------------|--------------------------------------------|
| package | A Data Package that contains a collection of related data resources and properties. |
| resource | A single data file within a package including its properties. |
| descriptor | The standalone and complete metadata structure contained in a JSON file, for example, in `datapackage.json`. |
| properties | Individual elements of the metadata structure or the structure as a whole. |
| standard | The JSON schema defining the Data Package standard. |
| config | An object containing settings for modifying the behaviour and output of the check mechanism. |

: Objects used throughout `check-datapackage`.

### Actions

| Action | Description |
|----------------------------|--------------------------------------------|
| check | Check that a descriptor conforms to the Data Package standard. |
| explain | Explain issues flagged by the check mechanism in more detail using non-technical language. |
| read | Read various files, such as the Data Package descriptor or configuration files. |

: Actions that `check-datapackage` can perform.
