---
title: "Architecture"
---

This documentation contains the architectural design for
`check-datapackage`. For design details of the Seedcase Project as a
whole, see the [Seedcase Design](https://design.seedcase-project.org)
documentation.

This document outlines the architecture of `check-datapackage` mostly to
ensure the team shares a common understanding before implementation, but
also to communicate the design to anyone else interested in the internal
workings of the package.

## User types {#user-types}

This section describes the different users we expect and design for:

-   **Owner:** Creates and owns the Data Package. Wants to ensure that
    the Data Package is compliant with the Data Package standard on a
    general level.
-   **Manager:** Manages and edits the properties within the Data
    Package. Wants to make sure that whenever changes are made to the
    properties (e.g., the `description` field is updated), the Data
    Package remains compliant with the standard.
-   **Developer:** Contributes to building up the Data Package including
    the data itself and/or the infrastructure around it. Wants to ensure
    that changes don't impact the compliance of the Data Package. Might
    add custom checks or ignore certain checks to fit the specific needs
    of the project.

## Naming

This section contains a naming scheme for `check-datapackage` that is
inspired by the [Data Package standard](https://datapackage.org/).

Overall, we follow the Data Package terminology where possible to keep
things consistent. However, we also introduce some new terms and
concepts specific to `check-datapackage`. The main objects and actions
used throughout the package can be found in the tables below.

### Objects

| Object | Description |
|----------------------------|--------------------------------------------|
| package | A Data Package that contains a collection of related data resources and descriptor(s). |
| descriptor | A standalone and complete metadata structure contained in a JSON file, for example, in `datapackage.json`. |
| properties | Metadata fields (name-value pairs) of a descriptor loaded as a Python dictionary. This can be a subset of the original descriptor or the entire structure. |
| schema | The JSON schema defining the Data Package standard. |
| config | An object containing settings for modifying the behaviour and output of the check mechanism. |

: Objects used throughout `check-datapackage`.

### Actions

| Action | Description |
|----------------------------|--------------------------------------------|
| check | Check that a descriptor conforms to the Data Package standard. |
| explain | Explain issues flagged by the check action in more detail using non-technical language. |
| read | Read various files, such as a Data Package descriptor or a configuration file. |

: Actions that `check-datapackage` can perform.

## C4 Models

This section contains the [C4 Models](https://c4model.com/) for
`check-datapackage`. The C4 Model is an established visualisation
approach to describe the architecture of a software system. It breaks
the system down into four levels of architectural abstraction: System
context, containers, components, and code.

### System context

The system context diagram shows the users and any external systems that
interact with `check-datapackage`. This includes the user types and the
Data Package standard.

`check-datapackage` receives the definitions of the Data Package
descriptor's structure---including required properties, their formats,
and recommended fields---from the Data Package standard (version 2). The
standard provides this information through versioned JSON Schema
profiles that define required properties and textual descriptions that
outline recommendations.

The users, described in the [User types](#user-types) section, provide
`check-datapackage` with their Data Package's descriptor to check its
compliance with the standard.

```{mermaid}
%%| label: fig-c4-context
%%| fig-cap: "C4 system context diagram showing the anticipated users and the external system (the Data Package standard) `check-datapackage` interacts with."
flowchart LR

    subgraph "Users"
        user_owner("Owner<br>[person]")
        user_manager("Manager<br>[person]")
        user_developer("Developer<br>[person]")
    end

    dp_standard("Data Package V2<br>[standard]")
    check("check-datapackage<br>[Python package]")


    dp_standard --"Definition of the standard<br>and its recommendations"--> check
    Users --"Check the compliance of<br>a Data Package's<br>descriptor"--> check
    %% Styling
    style Users fill:#FFFFFF, color:#000000
```

### Container

In C4, a [container diagram](https://c4model.com/diagrams/container)
zooms in on the system boundary to show the *containers* within it, such
as web applications or databases. This diagram displays the main
containers of `check-datapackage`, their responsibilities, and how they
interact, including the technologies used for each.

Currently, we build `check-datapackage` with a single container---the
core Python package---but we've designed it to be extendable as a
command line interface (CLI) in the future. With a CLI, we want to ease
the process of implementing the checks in e.g., continuous integration
pipelines.

```{mermaid}
%%| label: fig-c4-container
%%| fig-cap: "C4 container diagram showing the core Python package in `check-datapackage` and the future command line interface (displayed dashed)."
flowchart LR

    users("Users<br>[person]")
    dp_standard("Data Package V2<br>[standard]")

    subgraph "check-datapackage"
        python("Core Python Package<br>[Python, JSON schema]")
        cli("CLI<br>[Python]")

    python -. "Provides<br>functionality" .-> cli
    end

    dp_standard --"Definition of the standard<br>and its recommendations"--> python
    users --"Programmatically check<br>the compliance of<br>a Data Package's<br>descriptor"--> python
    users -. "Check the compliance of<br>a Data Package's<br>descriptor via the<br>command line" .-> cli

    %% Styling
    style check-datapackage fill:#FFFFFF, color:#000000
    style cli fill:#FFFFFF, stroke-dasharray: 5 5
```
