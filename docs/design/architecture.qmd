---
title: "Architecture"
---

This documentation contains the architectural design for
`check-datapackage`. For design details of the Seedcase Project as a
whole, see the [Seedcase Design](https://design.seedcase-project.org)
documentation.

This document outlines the architecture of `check-datapackage` mostly to
ensure the team shares a common understanding before implementation, but
also to communicate the design to anyone else interested in the internal
workings of the package.

## User types {#user-types}

This section describes the different users we expect and design for:

-   **Owner:** Creates and owns the Data Package. Wants to ensure that
    the Data Package is compliant with the Data Package standard on a
    general level.
-   **Manager:** Manages and edits the properties within the Data
    Package. Wants to make sure that whenever changes are made to the
    properties (e.g., the `description` field is updated), the Data
    Package remains compliant with the standard.
-   **Developer:** Contributes to building up the Data Package including
    the data itself and/or the infrastructure around it. Wants to ensure
    that changes don't impact the compliance of the Data Package. Might
    add custom checks or ignore certain checks to fit the specific needs
    of the project.

## Naming

This section contains a naming scheme for `check-datapackage` that is
inspired by the [Data Package standard](https://datapackage.org/).

Overall, we follow the Data Package terminology where possible to keep
things consistent. However, we also introduce some new terms and
concepts specific to `check-datapackage`. The main objects and actions
used throughout the package can be found in the tables below.

### Objects

| Object | Description |
|----------------------------|--------------------------------------------|
| package | A Data Package that contains a collection of related data resources and descriptor(s). |
| resource | A single data file within a package including its properties. |
| descriptor | A standalone and complete metadata structure contained in a JSON file, for example, in `datapackage.json`. |
| properties | Metadata fields (name-value pairs) of a descriptor loaded as a Python dictionary. This can be a subset of the original descriptor or the entire structure. |
| schema | The JSON schema defining the Data Package standard. |
| config | An object containing settings for modifying the behaviour and output of the check mechanism. |

: Objects used throughout `check-datapackage`.

### Actions

| Action | Description |
|----------------------------|--------------------------------------------|
| check | Check that a descriptor conforms to the Data Package standard. |
| explain | Explain issues flagged by the check action in more detail using non-technical language. |
| read | Read various files, such as a Data Package descriptor or a configuration file. |

: Actions that `check-datapackage` can perform.

## C4 Models

This section contains the [C4 Models](https://c4model.com/) for
`check-datapackage`. The C4 Model is an established visualisation
approach to describe the architecture of a software system. It breaks
the system down into four levels of architectural abstraction: Context,
Containers, Components, and Code. For our case, the **Context** and
**Containers** diagrams are the most useful.

### Context

The Context diagram shows the users and any external systems that
interact with `check-datapackage`. This includes the user types
described in the [User types](#user-types) section.

::: callout-caution
For some reason, these diagrams don't display well on some browsers like
Firefox. To see them, try using a different browser like Chrome or Edge.
:::

```{mermaid}
%%| label: fig-c4-context
%%| fig-cap: "C4 Context diagram showing a very basic overview of `check-datapackage` and its anticipated users."
flowchart LR
    user_owner(["Owner<br>[person]"])
    user_manager(["Manager<br>[person]"])
    user_developer(["Developer<br>[person]"])
    ext_dp_schema(["Data Package standard<br>[standard]"])
    check

    ext_dp_schema --> check
    user_owner --> check
    user_manager --> check
    user_developer --> check
```

### Container

The Container diagram shows the larger parts of the system, what they
are responsible for, and how they interact with each other. It also
shows the technology choices for each container.

```{mermaid}
%%| label: fig-c4-container
%%| fig-cap: "C4 Container diagram showing larger parts of `check-datapackage` and their connections."
flowchart LR
    ext_dp_schema(["Data Package standard<br>[JSON]<br><br>Define descriptor<br>structure and contents."])
    in_dp_json(["Descriptor<br>[Python]<br><br>Describe Data Package<br>or Data Resource."])
    config(["Config<br>[Python]<br><br>Configure check<br>behaviour and output."])
    check

    config --> check
    ext_dp_schema --> check
    in_dp_json --> check
```
